#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# Created on 2021-08-07
#
# @author: Dirk Osswald
'''
Grip (or release) with a SCHUNK BKS gripper (like EGI/EGU/EGK) according to the parameters given.|n
|n
Example usage:|n
- Perform a "BasicGrip":|n
    %(prog)s -H 10.49.57.13 |n
|n
- Perform a "Release" of an already gripped object:|n
    %(prog)s -H 10.49.57.13 --release |n
|n
- Perform a "BasicGrip" with grip direction "from inside" and 50%% gripping
  force:|n
    %(prog)s -H 10.49.57.13 --dir=FROM_INSIDE --force=50|n
|n
- Perform a "SoftGrip" with grip direction "from outside" and 50%% gripping
  force and gripping velocity of 7mm/s:|n
    %(prog)s -H 10.49.57.13 --dir=FROM_OUTSIDE --force=50 --grip_velocity=7|n
|n
- Perform a "BasicGrip with expected position" with grip direction "from
  inside" and the expected workpiece position at 33 mm and 75%% gripping force:|n
    %(prog)s -H 10.49.57.13 --dir=FROM_INSIDE  --force=75 --expected_position=33 |n
|n
- Perform a "BasicGrip" for a Modbus-RTU gripper on serial port COM3 with grip
  direction "from outside" and 50%% gripping force:|n
    %(prog)s -H COM3 --dir=FROM_OUTSIDE --force=50|n
|n
- Perform a "SoftGrip with expected position" for a Modbus-RTU gripper with Slave-ID 12 and on
  serial port COM1 with baudrate 115200 with grip direction "from inside"
  and 100%% gripping force and gripping velocity of 7mm/s:|n
    %(prog)s -H COM1,12,115200 --dir=FROM_INSIDE  --force=100 --expected_position=33 --grip_velocity=100|n
|n
'''

import os.path
import time

import pyschunk.tools.mylogger
from bkstools.bks_lib.bks_base import BKSBase
from pyschunk.generated.generated_enums import eCmdCode
from bkstools.bks_lib.debug import Print
from bkstools.bks_lib.debug import g_logmethod # @UnusedImport

logger = pyschunk.tools.mylogger.getLogger( "BKSTools.bks_grip" )
pyschunk.tools.mylogger.setupLogging()
g_logmethod = logger.info

from bkstools.bks_lib import bks_options

def WaitGrippedOrError( bksb ):
    """Wait until the gripper signals workpiece gripped or some kind of error
    """
    statusword = bksb.plc_sync_input[0]
    while ( (statusword & (bksb.sw_error | bksb.sw_not_feasible | bksb.sw_gripped | bksb.sw_no_workpiece_detected | bksb.sw_workpiece_lost | bksb.sw_wrong_workpiece_detected)) == 0 ):
        time.sleep(0.010)
        statusword = bksb.plc_sync_input[0]

    if ( statusword & bksb.sw_gripped) :
        Print( f"Workpiece gripped at {bksb.actual_pos:.1f} mm" )
    if ( statusword & bksb.sw_no_workpiece_detected) :
        Print( f"No workpiece detected!" )
    if ( statusword & bksb.sw_workpiece_lost) :
        Print( f"Workpiece lost at {bksb.actual_pos:.1f} mm!" )
    if ( statusword & bksb.sw_wrong_workpiece_detected) :
        Print( f"Wrong workpiece detected at {bksb.actual_pos:.1f} mm!" )


def main():
    if ( "__file__" in globals() ):
        prog = os.path.basename( globals()["__file__"] )
    else:
        # when runnging as an exe generated by py2exe then __file__ is not defined!
        prog = "bks_grip.exe"

    parser = bks_options.cBKSTools_OptionParser( prog=prog,
                                                 description = __doc__,                         # @UndefinedVariable
                                                 additional_arguments=["direction",
                                                                       "grip_velocity",
                                                                       "force" ] )
    parser.add_argument( '--expected_position', '--pos',
                         dest="expected_position",
                         default=None,
                         type=float,
                         help="""Expected position of workpiece in mm.
                         If not given then a BasicGrip or SoftGrip command is used with configurable force but unknown workpiece position.
                         If given then a BasicGrip or SoftGrip command with expected postion is used with configurable force and
                         an expected workpiece position.""" )
    parser.add_argument( '--release',
                         dest="release",
                         default=False,
                         action="store_true",
                         help="""If given then perform a release workpiece CMD_RELEASE_WORK_PIECE instead of gripping.
                         This will succeed only if a workpiece is currently gripped. The release movement
                         moves the fingers away from the gripped workpiece according to the wp_release_delta parameter.
                         When given then all other parameters are ignored. """ )

    args = parser.parse_args()


    bksb = BKSBase( args.host, debug=args.debug, repeater_timeout=args.repeat_timeout, repeater_nb_tries=args.repeat_nb_tries  )

    Print( f"Starting at {bksb.actual_pos:.1f} mm" )

    if ( bksb.plc_sync_input[0] & bksb.sw_error) :
        ec = bksb.err_code
        ec_str = bksb.enums["err_code"].GetName(ec, "?" )
        Print( f"Acknowledging pending error 0x{ec:02x} ({ec_str})" )
        bksb.command_code = eCmdCode.CMD_ACK

    if ( args.release ):
        #--- check if releasing is possible (only if a workpiece is gripped):
        if ( bksb.plc_sync_input[0] & bksb.sw_gripped == 0 ) :
            Print( f"Warning: no workpiece gripped, releasing will not be possible!" )

        #--- Releasing is simple: just set the command code:
        bksb.command_code = eCmdCode.CMD_RELEASE_WORK_PIECE
        time.sleep(0.010)

        #--- wait for position reached or error:
        while ( (bksb.plc_sync_input[0] & (bksb.sw_error | bksb.sw_not_feasible | bksb.sw_position_reached)) == 0 ):
            time.sleep(0.010)

        if ( bksb.plc_sync_input[0] & bksb.sw_position_reached) :
            Print( f"Release postion reached at {bksb.actual_pos:.1f} mm" )

    else:
        #--- Gripping is more complex: determine which kind of grip requested first:

        bksb.set_force = args.force
        bksb.grp_dir   = args.direction

        if ( args.grip_velocity is None ):
            bksb.set_vel = 0
            grip_type = f'"BasicGrip"'
        else:
            bksb.set_vel = args.grip_velocity
            grip_type = f'"SoftGrip" with grip velocity {args.grip_velocity:.1f} mm/s'

        if ( args.expected_position is None ):
            #--- simple gripping needs just the already set direction, grip_velocity and force plus the command code:
            bksb.command_code = eCmdCode.MOVE_FORCE

        else:
            #--- complex gripping additionaly requires expected workpiece position
            # and prepositioning velocity (plus the aleady set direction and force)
            # plus the command code:
            bksb.set_pos = args.expected_position
            bksb.command_code = eCmdCode.MOVE_GRIP_WORKPIECE_WITH_POSITION
            grip_type += f' with expected postion {args.expected_position:.1f} mm'

        Print( f"""Using {grip_type} {args.direction_description} with {args.force:.0f} % gripping force""" )

        time.sleep(0.010)

        #--- wait for gripped/no worpiece/wrong workpiece/lost workpiece or error:
        WaitGrippedOrError( bksb )

    if ( bksb.plc_sync_input[0] & bksb.sw_not_feasible) :
        Print( f"Warning: Operation not feasible!" )
        bksb.sys_msg_req = 0
        time.sleep(0.05)
        Print( f"  Detailed reason: {bksb.sys_msg_buffer}" )

    if ( bksb.plc_sync_input[0] & bksb.sw_error) :
        ec = bksb.err_code
        try:
            ec_str = bksb.enums["err_code"].GetName(ec, "?" )
        except KeyError:
            ec_str = "?"

        Print( f"Error: Operation failed Error code = {ec:02x} = {ec_str}!" )

    Print( f"Final positon at {bksb.actual_pos:.1f} mm" )

if __name__ == '__main__':
    from pyschunk.tools import attach_to_debugger
    attach_to_debugger.AttachToDebugger( main )
    #main()
