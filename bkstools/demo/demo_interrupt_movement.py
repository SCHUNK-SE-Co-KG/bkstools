#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# Created on 18.10.2018
#
# @author: Dirk Osswald
'''
Demo code for moving a SCHUNK BKS gripper in various ways to test interruptability of different commands
|n
Example usage:|n
-  %(prog)s -H 10.49.57.13
'''

import os.path

import pyschunk.tools.mylogger

from bkstools.bks_lib.bks_base import keep_communication_alive_sleep
from bkstools.bks_lib.bks_module import BKSModule, HandleWarningPrintOnly
from bkstools.bks_lib.debug import Print, Var, ApplicationError, g_logmethod  # @UnusedImport


logger = pyschunk.tools.mylogger.getLogger( "BKSTools.demo.demo_interrupt_movement" )
pyschunk.tools.mylogger.setupLogging()
g_logmethod = logger.info

from bkstools.bks_lib import bks_options

g_bksb = None
def my_sleep( t ):
    '''alias
    '''
    global g_bksb
    return keep_communication_alive_sleep( g_bksb, t )

class DemoMoveInterruptor( BKSModule ):
    """Demonstration class with some specific movement methods
    """

    def __init__( self, host, max_age_in_s=5*60, init_pos=5000, init_vel=200000, debug=False, repeater_timeout=3.0, repeater_nb_tries=5 ):
        """CTor, see base class
        """
        BKSModule.__init__(self, host, max_age_in_s, handle_warning=HandleWarningPrintOnly, debug=debug, repeater_timeout=repeater_timeout, repeater_nb_tries=repeater_timeout )
        global g_bksb
        g_bksb = self
        self.init_pos = init_pos
        self.init_vel = init_vel

        self.MakeReady()


    def Prepare( self ):
        print ("\nInitial movement to 5")
        self.move_to_absolute_position( 5000, 200000 )


    def MoveAbsAbs( self ):
        self.Prepare()

        my_sleep( 1 )
        print ( f"1st move_abs from {self.actual_pos:.1f} to 99, will be interrupted:")
        self.move_to_absolute_position( 99000, 15000, do_wait_for_command_successfully_processed=False )
        my_sleep( 1 )
        p = self.actual_pos
        print ( f"interrupted at {p:.1f} mm, move_abs back to 5" )
        self.move_to_absolute_position( 5000, 100000 ) #works
        print ("not_feasible=%r" % (bool( self.plc_sync_input[0] & self.sw_not_feasible) ))


    def GripMoveAbs( self ):
        self.Prepare()

        print ( f"\n2nd movement grip inside from {self.actual_pos:.1f} mm, will be interrupted:")
        self.grip_workpiece( self.grip_from_inside, 25000, 25000, do_wait_for_command_successfully_processed=False )
        my_sleep( 0.5 )
        p = self.actual_pos
        print ( f"interrupted at {p:.1f} mm, moving back to 5")
        self.move_to_absolute_position( 5000, 100000 ) # will stop gripper and set not_feasible
        print ("not_feasible=%r" % (bool( self.plc_sync_input[0] & self.sw_not_feasible) ))


    def MoveAbsRel( self ):
        self.Prepare()

        my_sleep( 1 )
        print( f"3rd move_abs from {self.actual_pos:.1f} mm to 99, will be interrupted:" )
        self.move_to_absolute_position( 99000, 15000, do_wait_for_command_successfully_processed=False )
        my_sleep( 1 )
        p = self.actual_pos
        print( f"interrupted at {p:.1f} mm, move_rel back to 5" )
        self.move_to_relative_position( -int(p*1000.0)+5000, 100000 ) #works
        print( "not_feasible=%r" % (bool( self.plc_sync_input[0] & self.sw_not_feasible) ) )


    def MoveRelRel( self ):
        self.Prepare()

        my_sleep( 1 )
        print ( f"4th move_rel from {self.actual_pos:.1f} mm to 99, will be interrupted:")
        self.move_to_relative_position( 99000-int(self.actual_pos*1000.0), 15000, do_wait_for_command_successfully_processed=False )
        my_sleep( 1 )
        p = self.actual_pos
        print ( f"interrupted at {p:.1f} mm, move_rel back to 5" )
        self.move_to_relative_position( -int(p*1000.0)+5000, 100000 ) #works
        print ("not_feasible=%r" % (bool( self.plc_sync_input[0] & self.sw_not_feasible) ))


    def MoveRelAbs( self ):
        self.Prepare()

        my_sleep( 1 )
        print ( f"5th move_rel from {self.actual_pos:.1f} to 99, will be interrupted:")
        self.move_to_relative_position( 99000-int(self.actual_pos*1000.0), 15000, do_wait_for_command_successfully_processed=False )
        my_sleep( 1 )
        p = self.actual_pos
        print ( f"interrupted at {p:.1f} mm, move_abs back to 5" )
        self.move_to_relative_position( 5000, 100000 ) #works
        print ( "not_feasible=%r" % (bool( self.plc_sync_input[0] & self.sw_not_feasible) ) )


def main():
    if ( "__file__" in globals() ):
        prog = os.path.basename( globals()["__file__"] )
    else:
        # when runnging as an exe generated by py2exe then __file__ is not defined!
        prog = "demo_interrupt_movement.exe"

    parser = bks_options.cBKSTools_OptionParser( prog=prog,
                                                 description = __doc__ )   # @UndefinedVariable

    args = parser.parse_args()

    maxage_s = 5*60.0
    if ( args.force_reread ):
        maxage_s = 0.0

    #--- Create the gripper object:
    dmi = DemoMoveInterruptor( args.host, maxage_s, debug=args.debug, repeater_timeout=args.repeat_timeout, repeater_nb_tries=args.repeat_nb_tries )

    dmi.MoveAbsAbs()
    my_sleep( 3 )

    dmi.GripMoveAbs()
    my_sleep( 3 )

    dmi.MoveAbsRel()
    my_sleep( 3 )

    dmi.MoveRelRel()
    my_sleep( 3 )

    dmi.MoveRelAbs()
    my_sleep( 3 )


if __name__ == '__main__':
    from pyschunk.tools import attach_to_debugger
    attach_to_debugger.AttachToDebugger( main )
    #main()
