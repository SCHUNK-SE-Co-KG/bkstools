#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# Created on 2021-08-06
#
# @author: Dirk Osswald
'''
Perform Modbus-RTU diagnostics via function code 8. |n
- Will work with Modbus-RTU slaves only.|n
- Supports sub-fuction 04 "Force Listen Only Mode" only, but with the SCHUNK extension to set a response expectancy other than 0|n

The expectancy will determine how likely it is that a future request
will be responded by this slave.|n
- A value of 0 will respond to no more requests (switch responses off, listen only mode)|n
- A value of 1 will respond to each future request (normal mode)|n
- A value of 2 will respond to every second request (on average) only|n
- A value of 3 will respond to every third request (on average) only|n
- ...

This can be helpful in situations where multiple Modbus-RTU devices happen to have the same slave_id.
This usually leads to data collisions in the responses sent from the slaves.
By setting the \a response_expectancy to 2 when you have 2 Modbus-RTU devices with the same slave_id
Then you can read a proper response with a probability of 0.5 So to read a parameter (like e.g. the
serial_no_num of all "colliding" grippers you would have to read multiple times until you get as
many different serial_no_num responses as "colliding" grippers.
|n|n
The bks_scan script uses this feature for exactly that.
|n|n
Example usage:|n
-  %(prog)s -H COM6,12
'''


import os.path
import sys

from bkstools.bks_lib.bks_base import BKSBase, GetModbusSettings
from bkstools.bks_lib.debug import Print, Error, Var, ApplicationError, g_logmethod  # @UnusedImport
from bkstools.bks_lib import bks_options

def main():
    if ( "__file__" in globals() ):
        prog = os.path.basename( globals()["__file__"] )
    else:
        # when runnging as an exe generated by py2exe then __file__ is not defined!
        prog = "demo_diagnostics.exe"

    #--- create a command line option parser and parse the command line:
    parser = bks_options.cBKSTools_OptionParser( prog=prog,
                                                 description = __doc__ )     # @UndefinedVariable

    parser.add_argument( '-e', "--nb_expected", "--response_expectancy",
                         dest="response_expectancy",
                         default=2,
                         type=int,
                         help="""The response expectancy (likelihood for sending a response) to set. This can be used to make slaves respond with a probability of 1/response_expectancy only.
                         If you expect to find 2 slaves with colliding slave-ID then set this to 2, for 3 to 3 and so on. Default is %(default)d.""" )
    args = parser.parse_args()

    #--- Create a BKSBase object to interact with the gripper:
    if ( GetModbusSettings( args.host ) is None ):
        Error( f"Diagnostics works for Modbus-RTU devices only!\n{args.host!r} does not denote a Modbus-RTU device." )
        return 1
    bksb = BKSBase( args.host, debug=args.debug, repeater_timeout=args.repeat_timeout, repeater_nb_tries=args.repeat_nb_tries )

    bksb.SetResponseExpectancy( args.response_expectancy )


if __name__ == '__main__':
    from pyschunk.tools import attach_to_debugger
    rc = attach_to_debugger.AttachToDebugger( main )
    sys.exit( rc )
    #main()
