# -*- coding: UTF-8 -*-
'''
Created on 19.11.2018

@author: Dirk Osswald
'''

import os
import sys
import platform
import argparse
import time

import bkstools.release
import pyschunk.release
from bkstools.bks_lib.debug import Debug, ApplicationError
from pyschunk.tools.util import MultilineFormatter


_old_time_sleep = time.sleep
def debug_sleep(t):
    """Replacement for time.sleep which debug prints calls to time.sleep()
    Activated by --debug_sleep command line option
    """
    global _old_time_sleep
    t0 = time.time()
    _old_time_sleep( t )
    t1 = time.time()
    Debug( f"sleep({t}) took {t1-t0:.3f}s" ) ; sys.stdout.flush()


class cBKSTools_OptionParser( argparse.ArgumentParser ):
    '''Derived command line option parser with options specific for all BKSTools scripts
    '''
    def __init__(self, prog="", description="", fileversion="",
                 additional_arguments=[] ):
        try:
            dummy = __file__    # __file__ is not available in frozen exes generated by py2exe
            frozen = ""
        except NameError:
            frozen = " (frozen)"

        argparse.ArgumentParser.__init__( self, prog=prog, description=description, formatter_class=MultilineFormatter )
        self.additional_arguments = additional_arguments

        self.add_argument( "-v", "--version",
                           action="version",
                           version=fileversion + frozen
                                +  " |n %s: v-%s (%s)" % (bkstools.release.PROJECT_NAME, bkstools.release.PROJECT_RELEASE, bkstools.release.PROJECT_DATE)
                                +  " |n %s: v-%s (%s)" % (pyschunk.release.PROJECT_NAME, pyschunk.release.PROJECT_RELEASE, pyschunk.release.PROJECT_DATE)
                                +  " |n python: %s" % (sys.version)
                                +  " |n platform: %s" % (platform.platform()),
                           help="Print the version and exit." )

        self.add_argument( "-H", "--host",
                           dest="host",
                           type=str,
                           default=None,
                           help=""""The BKS module to connect to.
                           |n|n
                           For modules connected via ethernet this is the name or IP of the host to connect to.
                           |n|n
                           For modules connected via Modbus/RS485 this is a string of the form "SERIAL_INTERFACE,SLAVE_ID,BAUDRATE,COM_SETTINGS".
                           |n|n
                           SERIAL_INTERFACE is the serial interface to use like "COM1" on Windows or "/dev/ttyUSB0" on Linux|n
                           SLAVE_ID is the Modbus slave ID of the module (optional, default used by our modules is 12)|n
                           BAUDRATE is the RS485 baudrate in bit/s (optional, default used by our modules is 115200)|n
                           COM_SETTINGS must be 8E1 for now (8 data bits, Even parity, 1 stop-bit)
                           |n|n
                           SLAVE_ID, BAUDRATE and COM_SETTINGS may be left out and default to 12, 115200 and 8E1 respectively then.
                           A SLAVE_ID of 0 means "broadcast" and addresses all slaves. Only valid when writing values.
                           |n|n
                           Example: --host COM6,15,9600
                           |n|n
                           If not given then the value of the BKS_HOST environment variable is considered instead.""" )

        self.add_argument( "--force_reread",
                           dest="force_reread",
                           action="store_true",
                           help="Force re-reading of parameter names instead of using the cached values (at most 5 minutes old)." )

        self.add_argument( "--debug",
                           dest="debug",
                           action="store_true",
                           help="Enable debug outputs for the underlying communication (JSON/Modbus)." )

        self.add_argument( "--debug_sleep",
                           dest="debug_sleep",
                           action="store_true",
                           help="Enable debug output for calls to time.sleep()." )

        self.add_argument( "--repeat_timeout",
                           dest="repeat_timeout",
                           type=float, default=3.0,
                           help="Modbus only: the timeout in s used to automatically repeat read/write calls. 0.0=time out after first call. Default is %(default)s." )
        self.add_argument( "--repeat_nb_tries",
                           dest="repeat_nb_tries",
                           type=float, default=5,
                           help="Modbus only: the number of retries used to automatically repeat read/write calls. 1=try only once. Default is %(default)s." )

        for additional_argument in additional_arguments:
            if ( additional_argument == "direction"):
                self.add_argument( '--direction', '--dir',
                                   dest="direction",
                                   default='FROM_OUTSIDE',
                                   choices=['0', 'FROM_OUTSIDE', 'FROMOUTSIDE', 'OUTSIDE',
                                            '1', 'FROM_INSIDE', 'FROMINSIDE', 'INSIDE'],
                                   help="""Optional gripping direction.
                                           Use one of the choices. Default is %(default)s.""" )

            elif ( additional_argument == "grip_velocity"):
                self.add_argument( '--grip_velocity', '--gvel',
                                   dest="grip_velocity",
                                   default=None,
                                   type=float,
                                   help="""Optional grip velocity for "SoftGrip" in mm/s.
                                           Default is None, i.e. use "BasicGrip".""" )

            elif ( additional_argument == "force"):
                self.add_argument( '--force',
                                   dest="force",
                                   default=100,
                                   type=int,
                                   help="""Optional gripping force (roughly) in %%.
                                           The force to apply when gripping. Default is %(default)s.""" )


    def parse_args(self, args=None, namespace=None):
        """Overloaded parse_args: Sets parameter 'host' from environment if necessary.
        """
        args = super( cBKSTools_OptionParser, self ).parse_args( args, namespace )

        if ( args.debug ):
            import bkstools.bks_lib.debug  # @UnusedImport
            bkstools.bks_lib.debug.g_show_debug = True

        if ( args.host is None ):
            try:
                args.host = os.environ[ "BKS_HOST" ]
            except KeyError:
                raise ApplicationError( "You must provide the host to connect to. See online help." )

        if ( "direction" in self.additional_arguments ):
            if ( args.direction in ['0', 'FROM_OUTSIDE', 'FROMOUTSIDE', 'OUTSIDE' ] ):
                args.direction = False
                args.direction_description = "from outside"
            if ( args.direction in ['1', 'FROM_INSIDE', 'FROMINSIDE', 'INSIDE'] ):
                args.direction = True
                args.direction_description = "from inside"

        if ( args.debug_sleep ):
            time.sleep = debug_sleep


        return args
